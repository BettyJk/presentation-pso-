import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import numpy as np

# === Titre principal ===
st.title("D√©mo : Optimisation de l'Ordonnancement par PSO")

# === Objectif ===
st.markdown("## üéØ Objectif")
st.markdown("Minimiser la dur√©e globale du projet tout en respectant les d√©pendances entre t√¢ches.")

# === Donn√©es exemple - Avant optimisation ===
df_pre = pd.DataFrame({
    'T√¢che': ['T√¢che 1', 'T√¢che 2', 'T√¢che 3'],
    'D√©but': [0, 3, 7],
    'Dur√©e': [3, 4, 2],
    'Fin': [3, 7, 9]
})

# === Diagramme de Gantt - Avant optimisation ===
st.markdown("### üü† Diagramme de Gantt - Avant optimisation")

fig1 = go.Figure()

for i, row in df_pre.iterrows():
    fig1.add_trace(go.Bar(
        x=[row['Dur√©e']],
        y=[row['T√¢che']],
        base=[row['D√©but']],
        orientation='h',
        name=row['T√¢che'],
        hovertext=f"{row['T√¢che']}: {row['D√©but']} ‚Üí {row['Fin']}"
    ))

fig1.update_layout(
    barmode='stack',
    title='Planification avant optimisation',
    xaxis_title='Temps',
    yaxis_title='T√¢che',
    yaxis=dict(autorange='reversed')
)

st.plotly_chart(fig1)

# === Donn√©es exemple - Apr√®s optimisation par PSO ===
df_post = pd.DataFrame({
    'T√¢che': ['T√¢che 1', 'T√¢che 2', 'T√¢che 3'],
    'D√©but': [0, 2, 5],
    'Dur√©e': [2, 3, 2],
    'Fin': [2, 5, 7]
})

# === Diagramme de Gantt - Apr√®s optimisation ===
st.markdown("### üü¢ Diagramme de Gantt - Apr√®s optimisation (via PSO)")

fig2 = go.Figure()

for i, row in df_post.iterrows():
    fig2.add_trace(go.Bar(
        x=[row['Dur√©e']],
        y=[row['T√¢che']],
        base=[row['D√©but']],
        orientation='h',
        name=row['T√¢che'],
        hovertext=f"{row['T√¢che']}: {row['D√©but']} ‚Üí {row['Fin']}"
    ))

fig2.update_layout(
    barmode='stack',
    title='Planification apr√®s optimisation par PSO',
    xaxis_title='Temps',
    yaxis_title='T√¢che',
    yaxis=dict(autorange='reversed')
)

st.plotly_chart(fig2)

# === Graphe de convergence ===
st.markdown("### üìâ Graphe de convergence (Fitness vs. It√©ration)")

iterations = np.arange(1, 21)
fitness = np.exp(-0.2 * iterations) * 100 + np.random.normal(0, 2, 20)  # Simulation r√©aliste

plt.figure(figsize=(8, 4))
plt.plot(iterations, fitness, marker='o', color='green')
plt.title("Convergence de l'algorithme PSO")
plt.xlabel("It√©ration")
plt.ylabel("Fitness")
plt.grid(True)
st.pyplot(plt)
